# -*- coding: utf-8 -*-
"""day10 GradientBoostingMachine vid14

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D2R4rm-iAbkMEbXqPbn1XqTk5M94oo8i
"""

import pandas as pd
from sklearn import datasets
data = datasets.load_diabetes()
df = pd.DataFrame(data.data, columns = data.feature_names)
df['target'] = data.target
df

df[df.duplicated()]

df.isnull().sum()

X = df.drop(['target'], axis = 1)
y = df['target']
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state = 0)
from sklearn.ensemble import GradientBoostingRegressor
gbr = GradientBoostingRegressor(n_estimators = 500)
gbr.fit(X_train, y_train)
pred = gbr.predict(X_test)
from sklearn.metrics import mean_absolute_error
mean_absolute_error(y_test, pred)

features_score = pd.Series(gbr.feature_importances_, index = X_train.columns).sort_values(ascending = False)
print(features_score)

import matplotlib.pyplot as plt
import seaborn as sns
sns.barplot(x = features_score, y = features_score.index)
plt.xlabel('Features importance score')
plt.ylabel('Feature')
plt.show()

import numpy as np
test_score = np.zeros((500), dtype = np.float64)
for i, pred in enumerate(gbr.staged_predict(X_test)):
  test_score[i] = gbr.loss_(y_test, pred)
print(test_score)

fig = plt.figure(figsize = (10,10))
plt.title('Deviance')
plt.plot(np.arange(500), gbr.train_score_, '-b', label = 'Training Deviance score')
plt.plot(np.arange(500), test_score, '-g', label = 'Testing Deviance Score')
plt.subplot(1,1,1)
plt.ylabel('Deviance Score')
plt.xlabel('Stages')
plt.legend(loc = 'upper right')
plt.tight_layout()
plt.show