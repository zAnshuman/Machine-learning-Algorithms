# -*- coding: utf-8 -*-
"""Day8 RandomForest Vid11

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1clgi9dqV-JxE1lPYeHo4c8HbBNUiiNcp

car.data from UCI Machine Learning Repository
"""

import pandas as pd
df = pd.read_csv('car.data')

df

col = ['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'class']
df.columns = col
df

from sklearn.preprocessing import OrdinalEncoder
oe = OrdinalEncoder()
df['buying'] = oe.fit_transform(df[['buying']])
df['maint'] = oe.fit_transform(df[['maint']])
df['doors'] = oe.fit_transform(df[['doors']])
df['persons'] = oe.fit_transform(df[['persons']])
df['lug_boot'] = oe.fit_transform(df[['lug_boot']])
df['safety'] = oe.fit_transform(df[['safety']])
df['class'] = oe.fit_transform(df[['class']])
df

df[df.duplicated()]

x = df.iloc[:, 0 : -1]
y = df.iloc[:, -1]
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x,y, test_size = 0.25, random_state = 0)

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier()

from yellowbrick.model_selection import validation_curve
n_est = [100,200,450,500,750,1000]
print(validation_curve(RandomForestClassifier(), X = X_train, y = y_train, param_name = 'n_estimators', param_range = n_est, cv = 3))

md = [10,7,15,20,22]
print(validation_curve(RandomForestClassifier(), X = X_train, y = y_train, param_name = 'max_depth', param_range = md, cv =3 ))

ms = [3,4,6,8,5,12,15]
print(validation_curve(RandomForestClassifier(), X = X_train, y = y_train, param_name = 'min_samples_split', param_range = ms, cv = 3 ))

clf1 = RandomForestClassifier(n_estimators = 500, max_depth = 22, min_samples_split = 3)
clf1.fit(X_train, y_train)
pred = clf1.predict(X_test)
from sklearn.metrics import accuracy_score
accuracy_score(y_test, pred)

"""Finding importance of each feature"""

feature_scores = pd.Series(clf1.feature_importances_ , index = X_train.columns).sort_values(ascending = False)
print(feature_scores)

df.drop(['doors', 'lug_boot', 'maint'], axis = 1, inplace = True)
x = df.iloc[:, 0 : -1]
y = df.iloc[:, -1]
X_train, X_test, y_train, y_test = train_test_split(x,y, test_size = 0.25, random_state = 0)
clf2 = RandomForestClassifier(n_estimators = 500, max_depth = 22, min_samples_split = 3)
clf2.fit(X_train, y_train)
pred = clf2.predict(X_test)
accuracy_score(y_test, pred)